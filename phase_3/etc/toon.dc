// Filename: toon.dc
// Created by: DuckyDuck1553 (17June14)

keyword udp;

from src.coginvasion.avatar import DistributedAvatar/AI
from src.coginvasion.attack import BaseProjectile/AI
from src.coginvasion.attack import LinearProjectile/AI
from src.coginvasion.attack import LobProjectile/AI
from src.coginvasion.gagsnew import WholeCreamPieProjectile/AI
from src.coginvasion.gagsnew.WholeCreamPie/AI import PieGib/AI
from src.coginvasion.gagsnew import TNTProjectile/AI
from src.coginvasion.gagsnew import GumballProjectile/AI
from src.coginvasion.cog.attacks import BombProjectile/AI
from src.coginvasion.cog.attacks.Fired/AI import FiredProjectile/AI
from src.coginvasion.cog.attacks import GenericThrowableLinearProjectile/AI
from src.coginvasion.toon import DistributedToon/AI
from src.coginvasion.toon import DistributedPlayerToon/AI/UD
from src.coginvasion.cog import DistributedSuit/AI
from src.coginvasion.battle import DistributedBattleZone/AI
from src.coginvasion.battle import DistributedRestockBarrel/AI
from src.coginvasion.battle import DistributedGagBarrel/AI
from src.coginvasion.battle import DistributedHPBarrel/AI
from src.coginvasion.phys import DistributedPhysicsEntity/AI
from src.coginvasion.szboss.sewer import DistributedSewer/AI
from src.coginvasion.szboss.DistributedTrigger/AI import DistributedTriggerOnce/AI
from src.coginvasion.szboss.DistributedTrigger/AI import DistributedTriggerMultiple/AI
from src.coginvasion.szboss import DistributedFuncDoor/AI
from src.coginvasion.szboss.goon import NPC_Goon/AI
from src.coginvasion.szboss import DistributedSZBossSuit/AI
from src.coginvasion.szboss import DistributedCutscene/AI
from src.coginvasion.szboss import DistributedIndicatorLight/AI
from src.coginvasion.szboss import DistributedButton/AI
from src.coginvasion.szboss import DistributedGenerator/AI
from src.coginvasion.szboss import DistributedFuncRotating/AI
from src.coginvasion.szboss import DistributedSZBossToon/AI
from src.coginvasion.szboss import InfoBgm/AI
from src.coginvasion.szboss import AmbientGeneric/AI
from src.coginvasion.szboss import EnvParticleSystem/AI
from src.coginvasion.szboss import LogicScript/AI
from src.coginvasion.szboss import EnvFog/AI
from src.coginvasion.szboss import EnvElevatorCamera/AI
from src.coginvasion.szboss import EnvPostProcessFlash/AI
from src.coginvasion.szboss import InfoLandmark/AI
from src.coginvasion.szboss import TriggerChangeLevel/AI
from src.coginvasion.szboss import TriggerTransition/AI
from src.coginvasion.szboss import World/AI
from src.coginvasion.szboss import PropDynamic/AI
from src.coginvasion.szboss import PathTrack/AI
from src.coginvasion.szboss import FuncElevator/AI
from src.coginvasion.deathmatch import DistributedDeathmatchBattle/AI
from src.coginvasion.deathmatch import DistributedGagPickup/AI

struct AvChoice {
  uint32 avId;
  string dnaStrand;
  string name;
  int8 slot;
  uint32 lastHood;
};

struct Point3 {
  int16 / 10;
  int16 / 10;
  int16 / 10;
};

struct Point2 {
  int16 / 10;
  int16 / 10;
};

dclass Account {
  uint32 AVATAR_IDS[] required db;
  string ACCOUNT_ID required db;
  int8 BANNED required db;
};

dclass IDistributedEntity {
  // Index of this entity in the BSP file
  setIsMapEnt(uint8) required broadcast ram;
  setEntnum(uint16) required broadcast ram;
  setModel(string, uint8 animating = 0) required broadcast ram;
  setModelScale(Point3) required broadcast ram;
  setModelOrigin(Point3) required broadcast ram;
  setModelAngles(Point3) required broadcast ram;
  setEntityState(uint8) required broadcast ram;
  
  playSound(string soundName) broadcast;
  loopSound(string soundName) broadcast;
  stopSound(string soundName) broadcast;
};

dclass DistributedEntity : DistributedSmoothNode, IDistributedEntity {
};

dclass DistributedAvatar : DistributedEntity {
  setName(string) required broadcast ownrecv db;
  setMaxHealth(int16 = 15) required broadcast ownrecv db;
  setHealth(int16 = 15) required broadcast ownrecv db;
  setMoveBits(uint8 = 0) required broadcast ownsend airecv ram;
  setChat(string) broadcast ownsend airecv;
  announceHealth(int8, int16, int8) broadcast;
  setPlace(uint32) required broadcast ram;
  setHood(string) required broadcast ram;
  splash(int16/10, int16/10, int16/10) broadcast ownsend;
  takeDamage(uint16) ownsend airecv;
  doRagdollMode(float64 forceX, float64 forceY, float64 forceZ,
                float64 forcePosX, float64 forcePosY, float64 forcePosZ) broadcast;
  fadeOut(float64 time = 1.0) broadcast;
  fadeIn(float64 time = 1.0) broadcast;
  
  updateAttachment(string jointName, float64 x, float64 y,
                   float64 z, float64 h, float64 p, float64 r,
                   int16 timestamp) broadcast;

  // Special animations
  setActivity(int8 activity, int16 timestamp) broadcast;

  setLookPitch(int8 pitch) required broadcast ram ownsend airecv;
  setHitboxData(uint16 / 10, uint16 / 10, uint16 / 10) required broadcast ram ownsend airecv;

  // ========================= //
  // Attack stuff
  setAttackIds(int16 attackIDs[]) required broadcast ram;
  setEquippedAttack(int16 attackID = -1) required broadcast ram ownsend airecv;
  setAttackState(int8 state = -1) required broadcast ram ownsend airecv;

  // Bump ammo to uint16 if attack needs more than 255 ammo.
  //
  // Only the owner player needs to receive this update. Other players
  // don't really need to know about my ammo.
  updateAttackAmmo(int16 attackId, uint8 ammo, uint8 maxAmmo, uint8 ammo2,
                   uint8 maxAmmo2, uint8 clip, uint8 maxClip) ownrecv;

  // Blob argument allows for arbitrary data to be sent
  // along with the key press. This way we don't need a unique field
  // for a particular attack's data, just pack it into a Datagram
  // and send it as a blob, the AI implementation of the attacks
  // should understand how to unpack it.
  primaryFirePress(blob) ownsend airecv udp;
  primaryFireRelease(blob) ownsend airecv udp;
  secondaryFirePress(blob) ownsend airecv udp;
  secondaryFireRelease(blob) ownsend airecv udp;
  reloadPress(blob) ownsend airecv udp;
  reloadRelease(blob) ownsend airecv udp;
  // ========================= //
  
  doScaleUp() broadcast;
  
  handleDamage(float64 x, float64 y, float64 z) ownrecv;
};

dclass DistributedToon : DistributedAvatar {
  setDNAStrand(string) required broadcast ownrecv db;
  setAnimState(string, int16) broadcast ram ownsend airecv;
  lookAtObject(int16 / 10, int16 / 10, int16 / 10, int8 = 1) broadcast ownsend;
  setLookMode(uint8 mode) required broadcast ram ownsend airecv;
  
  setEyeState(uint8) required broadcast ram ownrecv;
  lookEyesAt(Point3) broadcast ownrecv;
  lookEyesAtObject(uint32) broadcast ownrecv;
  lookPupilsMiddle() broadcast ownrecv;
};

dclass DistributedPlayerToon : DistributedToon {
  // The account id this toon is associated with.
  uint32 ACCOUNT required db;

  setMoney(int32 = 0) required broadcast ownrecv db;

  // We'll do an array of zoneIds for now.
  setHoodsDiscovered(uint32[]) required ownsend ownrecv db;
  setTeleportAccess(uint32[]) required ownrecv db;

  setLastHood(uint32) required ownsend ownrecv db;
  setDefaultShard(uint32) required ownrecv db;
  setTrackExperience(blob) required broadcast airecv ownrecv db;
  setBackpackAmmo(blob) required broadcast airecv ownrecv db;
  setLoadout(uint8 gagIds [] = [2, 0, 1, 3]) required broadcast airecv ownrecv db;
  requestSetLoadout(uint8[]) ownsend airecv;
  setQuests(string) required broadcast ownrecv db;
  setQuestHistory(uint8[]) required broadcast ownrecv db;
  setTier(int8) required broadcast ownrecv db;
  setFriendsList(uint32[] = []) required ownrecv db airecv;
  updateBackpackAmmo() ownrecv;
  toonUp(uint8 hp, uint8 announce, uint8 sound) clsend airecv;
  setAccessLevel(uint16) required broadcast db ownrecv; // Is this me?
  announceHealthAndPlaySound(int8, int16) broadcast;
  setGhost(int8) required broadcast ram ownsend airecv;
  setPUInventory(int8[] = [0, 0]) required broadcast ownrecv db;
  setEquippedPU(int8) required broadcast ownrecv db;
  requestEquipPU(int8) ownsend airecv;
  usedPU(int8) ownsend airecv;
  requestAddFriend(uint32) ownsend airecv;
  setTutorialCompleted(int8) required broadcast ownrecv db;
  createTutorial() ownsend airecv;
  tutorialCreated(uint32) ownrecv;
  goThroughTunnel(uint32, int8) ownsend broadcast;
  
  // Admin requests for toon
  requestEject(uint32, int8 = 0) ownsend airecv;
  reqSetAccessLevel(uint16 accessLevel) clsend airecv;
  reqSetTSAUni(int8 flag) clsend airecv;
  reqSetWorldAccess(int8 andTP) clsend airecv;
  reqUnlockAllGags() clsend ownsend airecv;
  reqRefillLaff() clsend ownsend airecv;
  reqAllGagSlots() clsend ownsend airecv;
  
  createObjectForMe(uint16 dclassNum) ownsend airecv;
  reqMakeSewer() ownsend airecv;
  sewerHeadOff(uint32) ownrecv;

  // Health to be used in a battle/game mode that is only specific to that game.
  // Not saved in database.
  setSessionHealth(uint16) required broadcast ram;
  setSessionMaxHealth(uint16) required broadcast ram;
};

dclass DistributedSuit : DistributedAvatar {
  setLevel(uint8 level) required broadcast ram;
  setSuit(uint8 planId, uint8 variantId) required broadcast ram;
  setName(string name) required broadcast ram;

  setWalkPath(Point3[], int16) broadcast;

  // Tell the clients who we are targeting.
  setChaseTarget(uint32) broadcast;

  doStunEffect() broadcast;
  doGagEffect(uint16 flags) broadcast;

  stun(uint8 animB4Stun) broadcast;
};

dclass DistributedBattleZone : DistributedObject {
  setAvatars(uint32[]) required broadcast ram;
  setToonData(blob[]) broadcast;
  startRewardSeq(int16 timestamp) broadcast;
  acknowledgeAvatarReady() clsend airecv;
  rewardSequenceComplete(int16 timestamp) broadcast;
  clearAvatarDebris(uint32 avId) broadcast;
  setEntZone(uint32 zone) required broadcast ram;
  setMap(string mapName) required broadcast ram;
  readyToStart() clsend airecv;
  loadedMap() clsend airecv;
  emitSound(string path, Point3 worldPos, uint16 / 100 volume) broadcast;
  
  // Sent by the server to all clients: create a temp entity
  makeTempEnt(uint16 te, blob data) broadcast;
};

dclass DistributedRestockBarrel : DistributedNode, IDistributedEntity {
  requestGrab() airecv clsend;
  setGrab(uint32) broadcast ram;
  setLabel(uint16) broadcast ram;
  setReject() broadcast;
};

dclass DistributedGagBarrel : DistributedRestockBarrel {};

dclass DistributedHPBarrel : DistributedRestockBarrel {};

dclass DistributedPhysicsEntity : DistributedSmoothNode {
};

dclass DistributedFuncDoor : DistributedEntity {
  requestOpen() clsend airecv;
};

dclass DistributedTriggerOnce : DistributedEntity {
  onPlayerEnter() clsend airecv;
  onPlayerExit() clsend airecv;
};

dclass DistributedTriggerMultiple : DistributedTriggerOnce {
};

dclass DistributedSewer : DistributedBattleZone {
  startLevel() broadcast;
};

dclass NPC_Goon : DistributedAvatar {
  setHatType(int8 type) required broadcast ram;
  setIdealEyeColor(float64 r, float64 g, float64 b) required broadcast ram;
};

dclass DistributedSZBossSuit : DistributedSuit {
};

dclass DistributedSZBossToon : DistributedToon {
  use() clsend airecv;
};

dclass DistributedCutscene : DistributedEntity {
  doCutscene(string id) broadcast;
  endCutscene() broadcast;
};

dclass DistributedIndicatorLight : DistributedEntity {
  setLightColor(int16 / 10, int16 / 10, int16 / 10) required broadcast ram;
  setLightState(uint8) required broadcast ram;
};

dclass DistributedButton : DistributedEntity {
  setState(uint8) required broadcast ram;
  requestPress() clsend airecv;
};

dclass DistributedGenerator : DistributedEntity {
  setState(uint8) required broadcast ram;
};

dclass DistributedFuncRotating : DistributedEntity {
  setState(uint8) required broadcast ram;
};

dclass BaseProjectile : DistributedSmoothNode {
  impact(Point3, Point3) broadcast udp;
};

dclass LinearProjectile : BaseProjectile {
  setLinear(uint16 / 10, Point3, Point3, int16) required broadcast ram;
};

dclass LobProjectile : BaseProjectile {
  setProjectile(uint16 / 10, Point3, Point3, uint8 / 100, int16) required broadcast ram;
};

dclass WholeCreamPieProjectile : LobProjectile {
};

dclass TNTProjectile : DistributedPhysicsEntity {
  explode() broadcast udp;
};

dclass BombProjectile : DistributedPhysicsEntity {
  explode() broadcast udp;
};

dclass GumballProjectile : LobProjectile {
};

dclass FiredProjectile : LobProjectile {
};

dclass GenericThrowableLinearProjectile : LinearProjectile {
  setData(uint16 attackID) required broadcast ram;
};

dclass DistributedDeathmatchBattle : DistributedBattleZone {
  requestRespawn() clsend airecv;
  respawn();
};

dclass DistributedGagPickup : DistributedEntity {
  setPickupState(uint8 state) required broadcast ram;
  setGagId(int16 gagId) required broadcast ram;
  setCost(uint16) required broadcast ram;

  requestPickup() clsend airecv;
  pickupAccepted();
};

dclass InfoBgm : DistributedEntity {
  setSongName(string) required broadcast ram;
  setVolume(uint8 / 100) required broadcast ram;
  setLooping(uint8) required broadcast ram;
  
  playMusic() broadcast;
  stopMusic() broadcast;
  fadeOut(float64) broadcast;
  
  setEntityState(uint8) required broadcast ram;
};

dclass AmbientGeneric : DistributedEntity {
  setSoundFile(string) required broadcast ram;
  setLooping(uint8) required broadcast ram;
  setVolume(uint8 / 100) required broadcast ram;
  
  setEntityState(uint8) required broadcast ram;
  fadeIn(float64 time) broadcast;
  fadeOut(float64 time) broadcast;
};

dclass EnvParticleSystem : DistributedEntity {
};

dclass LogicScript : DistributedEntity {
};

dclass PieGib : DistributedEntity {
};

dclass EnvFog : DistributedEntity {
};

dclass EnvElevatorCamera : DistributedEntity {
};

dclass EnvPostProcessFlash : DistributedEntity {
  setFlashColor(float64, float64, float64) required broadcast ram;
  setBrightTime(float64) required broadcast ram;
  setDarkTime(float64) required broadcast ram;
  
  setEntityState(uint8) required broadcast ram;
};

dclass InfoLandmark : DistributedEntity {
};

dclass TriggerChangeLevel : DistributedEntity {
};

dclass TriggerTransition : DistributedEntity {
};

dclass World : DistributedEntity {
};

dclass FuncElevator : DistributedEntity {
};

dclass PropDynamic : DistributedEntity {
};

dclass PathTrack : DistributedEntity {
};
